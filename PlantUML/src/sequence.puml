@startuml Sequence
' function or procedure can be included
!include ./common/common.puml

' define common style
skinparam {
  BackgroundColor White
  defaultFontName Roboto
  sequenceArrowHead standard
  sequenceReferenceAlign center
  ParticipantPadding 5
  BoxPadding 50
  roundCorner 15
  ' auto text wrapping
  maxMessageSize 200
  PageMargin 20
}

participant "Alice" as a
participant "Bob" as b
database "Database" as db
' participant on multiline

actor       Actor       as Foo1
boundary    Boundary    as Foo2
control     Control     as Foo3
entity      Entity      as Foo4
database    Database    as Foo5
collections Collections as Foo6
queue       Queue       as Foo7
Foo -> Foo1 : To actor 
Foo -> Foo2 : To boundary
Foo -> Foo3 : To control
Foo -> Foo4 : To entity
Foo -> Foo5 : To database
Foo -> Foo6 : To collections
Foo -> Foo7: To queue

'============= Preprocessor =============
' https://plantuml.com/preprocessing

' define global scope variable(int, string, json)
!$CONFIG = {"mode":"DEBUG"}

' procedure to dynamically generate template
' args and args with default values (no object values)
!procedure $init($message="Hello once")
  ' procedure uses function defined in another file
  a -> b: say $code($message)

  !if ($CONFIG.mode == "DEBUG")
    b -> db: show some action in DEBUG mode
  !endif

!endprocedure

title Page 1
autonumber
hide unlinked
header Some Page Header
footer Page %page% of %lastpage%


$init()

!$foo = { "company": "Skynet", "employees" : [
  {"name" : "alice", "salary": 100 },
  {"name" : "bob", "salary": 50} ]
}

' use for each loop over a JSON
!foreach $emp in $foo.employees
  db -> db: $emp.name has salary  $emp.salary
!endfor

' use while loop
!$count = 3
!while $count != 0
  a -> b: call 1x
  !$count = $count - 1
!endwhile

'==================  sequence diagram constructs =======================
' format label
a -> b: <back:#dee3e0><color:red>formatted text</color></back>
a -> b : hello with [[http://plantuml.com/start some link]]

' arrow and format
b-[#red]> a : hello
b --[#0000FF]> a: ok
a ->(10) b: slanted arrow
b ->x a
b ->> a
b -\ a
b \\- a
b //-- a
b ->o a
b o\\-- a
b <-> a
b <->o a

' note and formatting
note left of a 
  This is **bold**
  This is //italics//
  This is ""monospaced""
  This is --stroked--
  This is __underlined__
  This is ~~waved~~
  This is <back:cadetblue><size:18>displayed</size></back>
end note

hnote right of a #aqua: This is displayed right of a.

note over a: This is displayed over a.

note over a, b #FFAAAA: This is displayed\n over b and a.

' lifeline
b -> a: DoWork
activate a

a -> b: << createRequest >>
activate b

b --> a: RequestCreated
deactivate b

a -> b: Done
deactivate a

destroy a

' delay
...


' reference
ref over a,b
  this can 
  be on serveral lines
end ref

' group and formatting
group#pink #orange group a
  a -> b: step in group a
end

a -> b: Authentication Request

alt successful case

    b -> a: Authentication Accepted

else some kind of failure

    b -> a: Authentication Failure
    group My own label
    a -> Log : Log attack start
        loop 1000 times
            a -> b: DNS Attack
        end
    a -> Log : Log attack end
    end

else Another type of failure

   b -> a: Please repeat

end


====
' multiple pages possible in the same diagram
newpage Page 2
autonumber
hide unlinked

$init("Hello again")

@enduml